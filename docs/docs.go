// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/recipes": {
            "put": {
                "description": "Update an existing recipe by providing updated Recipe JSON data. Returns updated recipe upon successful update.",
                "produces": [
                    "application/json"
                ],
                "summary": "Update Recipe",
                "parameters": [
                    {
                        "description": "Updated Recipe JSON",
                        "name": "Recipe",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Recipe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Recipe"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new recipe by providing Recipe JSON data and store it in the database. Returns the saved recipe as JSON.",
                "produces": [
                    "application/json"
                ],
                "summary": "Create a New Recipe",
                "parameters": [
                    {
                        "description": "Recipe JSON",
                        "name": "Recipe",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Recipe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Recipe"
                        }
                    }
                }
            }
        },
        "/recipes/search": {
            "get": {
                "description": "Search for recipes based on specified tags. Returns a list of matching recipes.",
                "produces": [
                    "application/json"
                ],
                "summary": "Search Recipes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of tags for filtering",
                        "name": "tags",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Recipe"
                            }
                        }
                    }
                }
            }
        },
        "/recipes/{id}": {
            "delete": {
                "description": "Delete a recipe by providing its unique identifier (ID). Returns a confirmation message upon successful deletion.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Recipe",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Recipe ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Recipe": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "ingredients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "instructions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "publishedAt": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Recipes API",
	Description:      "This is a sample recipes Api.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
 
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
